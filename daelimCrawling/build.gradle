plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'application'
}

group = 'com.daelim'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // mariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.0'
    // 이건 자바 버전과 호환이 되는지 확인해야 합니다.

    // h2DB 설정입니다.
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // 타임리프입니다
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	
    // junit test입니다 
    testImplementation 'org.junit.jupiter:junit-jupiter' 
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // 유효성 검사 라이브러리입니다
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring Boot JDBC 스타터
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // MariaDB JDBC 드라이버
    implementation 'mysql:mysql-connector-java:5.1.6'

    // AS400 JDBC 드라이버
    implementation 'net.sf.jt400:jt400:11.1'

    // Log4jdbc-log4j2
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:1.16'
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-core'
    implementation 'ch.qos.logback:logback-classic'
    
    // selenium 라이브러리
    //implementation files('bin/lib/selenium-server-4.21.0.jar')
    //implementation fileTree(dir: 'src/main/resources/jar', include: ['*.jar'])
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.2'
    // json 파싱을 위한 라이브러리
    implementation 'org.json:json:20210307'
    
    // 이메일 발송 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    
    // 백엔드를 통한 차트 생성 라이브러리
    implementation 'org.jfree:jfreechart:1.5.3'
    implementation 'commons-io:commons-io:2.8.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar{
    enabled=true
    archiveClassifier = '' // use empty string

    from { // 의존성 포함
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // 중복처리
}
